package me.shanked.nicatronTg.darklight.view;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Scanner;

/*
 * Copyright (C) 2013  Isaac Grant
 * 
 * This file is part of the Darklight Nova Core.
 *  
 * Darklight Nova Core is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Darklight Nova Core is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the Darklight Nova Core.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Generates an html file using the template and current stats from the engine
 * 
 * @author Isaac Grant
 * @author Lucas Nicodemus
 * @version .1
 *
 */

public class VulnerabilityOutputGenerator {

	private HashMap<String, String> fixedIssues = new HashMap<String, String>();
	
	/**
	 * 
	 * @return The fixedIssues HashMap used to format the template
	 */
	public HashMap<String, String> getFixedIssues() {
		return fixedIssues;
	}

	/**
	 * Set the fixedIssues HashMap that the template is formatted with
	 * @param fixedIssues HashMap to format the template with
	 */
	public void setFixedIssues(HashMap<String, String> fixedIssues) {
		this.fixedIssues = fixedIssues;
	}

	public VulnerabilityOutputGenerator() {
	}
	
	/**
	 * Format the template with the given issues and issue count
	 * @throws InvalidTemplateException The template does not contain the require flags ([fixedcount] and [issues])
	 * @throws IOException Template does not exist, or error reading/writing formatted template
	 */
	public void writeFixedIssues(String templatePath, String outputPath) throws InvalidTemplateException, IOException {
		File f = new File(new File("."), templatePath);
		
		if (!f.exists()) {
			throw new FileNotFoundException("Score template file missing! File " + templatePath + " does not exist.");
		}
		
		Scanner scanner = new Scanner(new FileInputStream(f));
		
		String template = "";
		
		while (scanner.hasNextLine()) {
			template += scanner.nextLine() + "\n";
		}
		
		scanner.close();
		
		if (!template.contains("[fixedcount]") || !template.contains("[issues]")) {
			throw new InvalidTemplateException("The specified input template, " + templatePath + ", did not contain the required formatting tags and cannot be parsed.");
		}
		
		template = template.replace("[fixedcount]", "" + fixedIssues.size());
		String tempIssuesList = "";
		for (String key : fixedIssues.keySet()) {
			String tempString = "<li>" + key + " - " + fixedIssues.get(key) + "</li>\n";
			tempIssuesList += tempString;
		}
		template = template.replace("[issues]", tempIssuesList);
		
		File outputFile = new File(new File("."), outputPath);
		if (outputFile.exists()) {
			outputFile.delete();
		}
		
		FileWriter fw = new FileWriter(outputFile);
		fw.write(template);
		fw.close();
	}
	
	class InvalidTemplateException extends Exception {

		private static final long serialVersionUID = 8843494291724959640L;
		
		public InvalidTemplateException() { }
		
		public InvalidTemplateException(String msg) {
			super(msg);
		}
		
	}
}
