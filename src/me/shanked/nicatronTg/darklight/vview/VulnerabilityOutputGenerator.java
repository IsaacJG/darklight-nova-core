package me.shanked.nicatronTg.darklight.vview;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.Scanner;

public class VulnerabilityOutputGenerator {

	private HashMap<String, String> fixedIssues = new HashMap<String, String>();
	private String templatePath;
	private String outputPath;
	
	public HashMap<String, String> getFixedIssues() {
		return fixedIssues;
	}

	public void setFixedIssues(HashMap<String, String> fixedIssues) {
		this.fixedIssues = fixedIssues;
	}

	public VulnerabilityOutputGenerator(HashMap<String, String> fixedIssues, String templatePath, String outputPath) {
		this.fixedIssues = fixedIssues;
		this.templatePath = templatePath;
		this.outputPath = outputPath;
	}
	
	public VulnerabilityOutputGenerator(String templatePath, String outputPath) {
		this.templatePath = templatePath;
		this.outputPath = outputPath;
	}
	
	public void writeFixedIssues() throws InvalidTemplateException, IOException {
		File f = new File(templatePath);
		
		if (!f.exists()) {
			throw new FileNotFoundException("Score template file missing! File " + templatePath + " does not exist.");
		}
		
		Scanner scanner = new Scanner(new FileInputStream(f));
		
		String template = "";
		
		while (scanner.hasNextLine()) {
			template += scanner.nextLine();
		}
		
		scanner.close();
		
		if (!template.contains("[fixedcount]") || !template.contains("[issues]")) {
			throw new InvalidTemplateException("The specified input template, " + templatePath + ", did not contain the required formatting tags and cannot be parsed.");
		}
		
		template = template.replace("[fixedcount]", "" + fixedIssues.size());
		String tempIssuesList = "";
		for (String key : fixedIssues.keySet()) {
			String tempString = "<li class=\"span10 offset2\">" + key + " - " + fixedIssues.get(key) + "</li>";
			tempIssuesList += tempString;
		}
		template = template.replace("[issues]", tempIssuesList);
		
		File outputFile = new File(outputPath);
		if (outputFile.exists()) {
			outputFile.delete();
		}
		
		FileWriter fw = new FileWriter(outputFile);
		fw.write(template);
		fw.close();
	}
	
	class InvalidTemplateException extends Exception {

		private static final long serialVersionUID = 8843494291724959640L;
		
		public InvalidTemplateException() { }
		
		public InvalidTemplateException(String msg) {
			super(msg);
		}
		
	}
}
